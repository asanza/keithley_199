/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_OS_TEST_H
#define _MOCK_OS_TEST_H

#include "os_test.h"

/* Ignore the following warnings, since we are copying code */
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 7)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"

void mock_os_test_Init(void);
void mock_os_test_Destroy(void);
void mock_os_test_Verify(void);




#define xQueueCreate_IgnoreAndReturn(cmock_retval) xQueueCreate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueueCreate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t cmock_to_return);
#define xQueueCreate_ExpectAndReturn(size, elem_size, cmock_retval) xQueueCreate_CMockExpectAndReturn(__LINE__, size, elem_size, cmock_retval)
void xQueueCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int size, int elem_size, QueueHandle_t cmock_to_return);
typedef QueueHandle_t (* CMOCK_xQueueCreate_CALLBACK)(int size, int elem_size, int cmock_num_calls);
void xQueueCreate_StubWithCallback(CMOCK_xQueueCreate_CALLBACK Callback);
#define xQueueSend_IgnoreAndReturn(cmock_retval) xQueueSend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueueSend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueueSend_ExpectAndReturn(xQueue, pvItemToQueue, xTicksToWait, cmock_retval) xQueueSend_CMockExpectAndReturn(__LINE__, xQueue, pvItemToQueue, xTicksToWait, cmock_retval)
void xQueueSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t xQueue, const void* const pvItemToQueue, TickType_t xTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueueSend_CALLBACK)(QueueHandle_t xQueue, const void* const pvItemToQueue, TickType_t xTicksToWait, int cmock_num_calls);
void xQueueSend_StubWithCallback(CMOCK_xQueueSend_CALLBACK Callback);
#define xQueuePeek_IgnoreAndReturn(cmock_retval) xQueuePeek_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueuePeek_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueuePeek_ExpectAndReturn(xQueue, pvBuffer, xTicksToWait, cmock_retval) xQueuePeek_CMockExpectAndReturn(__LINE__, xQueue, pvBuffer, xTicksToWait, cmock_retval)
void xQueuePeek_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t xQueue, void* const pvBuffer, TickType_t xTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueuePeek_CALLBACK)(QueueHandle_t xQueue, void* const pvBuffer, TickType_t xTicksToWait, int cmock_num_calls);
void xQueuePeek_StubWithCallback(CMOCK_xQueuePeek_CALLBACK Callback);
#define xQueueReceiveFromISR_IgnoreAndReturn(cmock_retval) xQueueReceiveFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueueReceiveFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueueReceiveFromISR_ExpectAndReturn(xQueue, pvBuffer, pxHigherPriorityTaskWoken, cmock_retval) xQueueReceiveFromISR_CMockExpectAndReturn(__LINE__, xQueue, pvBuffer, pxHigherPriorityTaskWoken, cmock_retval)
void xQueueReceiveFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t xQueue, void* const pvBuffer, BaseType_t* const pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueueReceiveFromISR_CALLBACK)(QueueHandle_t xQueue, void* const pvBuffer, BaseType_t* const pxHigherPriorityTaskWoken, int cmock_num_calls);
void xQueueReceiveFromISR_StubWithCallback(CMOCK_xQueueReceiveFromISR_CALLBACK Callback);
#define xQueueIsQueueEmptyFromISR_IgnoreAndReturn(cmock_retval) xQueueIsQueueEmptyFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueueIsQueueEmptyFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueueIsQueueEmptyFromISR_ExpectAndReturn(xQueue, cmock_retval) xQueueIsQueueEmptyFromISR_CMockExpectAndReturn(__LINE__, xQueue, cmock_retval)
void xQueueIsQueueEmptyFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const QueueHandle_t xQueue, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueueIsQueueEmptyFromISR_CALLBACK)(const QueueHandle_t xQueue, int cmock_num_calls);
void xQueueIsQueueEmptyFromISR_StubWithCallback(CMOCK_xQueueIsQueueEmptyFromISR_CALLBACK Callback);
#define xQueueSendFromISR_IgnoreAndReturn(cmock_retval) xQueueSendFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueueSendFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueueSendFromISR_ExpectAndReturn(xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, cmock_retval) xQueueSendFromISR_CMockExpectAndReturn(__LINE__, xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, cmock_retval)
void xQueueSendFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t xQueue, const void* const pvItemToQueue, BaseType_t* const pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueueSendFromISR_CALLBACK)(QueueHandle_t xQueue, const void* const pvItemToQueue, BaseType_t* const pxHigherPriorityTaskWoken, int cmock_num_calls);
void xQueueSendFromISR_StubWithCallback(CMOCK_xQueueSendFromISR_CALLBACK Callback);
#define xQueueReceive_IgnoreAndReturn(cmock_retval) xQueueReceive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueueReceive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueueReceive_ExpectAndReturn(xQueue, pvBuffer, xTicksToWait, cmock_retval) xQueueReceive_CMockExpectAndReturn(__LINE__, xQueue, pvBuffer, xTicksToWait, cmock_retval)
void xQueueReceive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t xQueue, void* const pvBuffer, TickType_t xTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueueReceive_CALLBACK)(QueueHandle_t xQueue, void* const pvBuffer, TickType_t xTicksToWait, int cmock_num_calls);
void xQueueReceive_StubWithCallback(CMOCK_xQueueReceive_CALLBACK Callback);
#define xQueuePeekFromISR_IgnoreAndReturn(cmock_retval) xQueuePeekFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xQueuePeekFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xQueuePeekFromISR_ExpectAndReturn(xQueue, pvBuffer, cmock_retval) xQueuePeekFromISR_CMockExpectAndReturn(__LINE__, xQueue, pvBuffer, cmock_retval)
void xQueuePeekFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, QueueHandle_t xQueue, void* const pvBuffer, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xQueuePeekFromISR_CALLBACK)(QueueHandle_t xQueue, void* const pvBuffer, int cmock_num_calls);
void xQueuePeekFromISR_StubWithCallback(CMOCK_xQueuePeekFromISR_CALLBACK Callback);
#define vTaskDelay_Ignore() vTaskDelay_CMockIgnore()
void vTaskDelay_CMockIgnore(void);
#define vTaskDelay_Expect(delay) vTaskDelay_CMockExpect(__LINE__, delay)
void vTaskDelay_CMockExpect(UNITY_LINE_TYPE cmock_line, const TickType_t delay);
typedef void (* CMOCK_vTaskDelay_CALLBACK)(const TickType_t delay, int cmock_num_calls);
void vTaskDelay_StubWithCallback(CMOCK_vTaskDelay_CALLBACK Callback);
#define uart3_int_wrapper_Ignore() uart3_int_wrapper_CMockIgnore()
void uart3_int_wrapper_CMockIgnore(void);
#define uart3_int_wrapper_Expect() uart3_int_wrapper_CMockExpect(__LINE__)
void uart3_int_wrapper_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_uart3_int_wrapper_CALLBACK)(int cmock_num_calls);
void uart3_int_wrapper_StubWithCallback(CMOCK_uart3_int_wrapper_CALLBACK Callback);
#define portEND_SWITCHING_ISR_Ignore() portEND_SWITCHING_ISR_CMockIgnore()
void portEND_SWITCHING_ISR_CMockIgnore(void);
#define portEND_SWITCHING_ISR_Expect(value) portEND_SWITCHING_ISR_CMockExpect(__LINE__, value)
void portEND_SWITCHING_ISR_CMockExpect(UNITY_LINE_TYPE cmock_line, portBASE_TYPE value);
typedef void (* CMOCK_portEND_SWITCHING_ISR_CALLBACK)(portBASE_TYPE value, int cmock_num_calls);
void portEND_SWITCHING_ISR_StubWithCallback(CMOCK_portEND_SWITCHING_ISR_CALLBACK Callback);
#define OC3_wrapper_Ignore() OC3_wrapper_CMockIgnore()
void OC3_wrapper_CMockIgnore(void);
#define OC3_wrapper_Expect() OC3_wrapper_CMockExpect(__LINE__)
void OC3_wrapper_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_OC3_wrapper_CALLBACK)(int cmock_num_calls);
void OC3_wrapper_StubWithCallback(CMOCK_OC3_wrapper_CALLBACK Callback);

#endif
